name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ closed ]
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${new_version} -m "Release ${new_version}"
          git push origin ${new_version}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_version }}
          release_name: Release ${{ steps.tag_version.outputs.new_version }}
          draft: false
          prerelease: false

  build:
    name: Build Binary
    needs: release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Build binary
        run: |
          cargo build --release --target x86_64-unknown-linux-musl

      - name: Prepare binary
        shell: bash
        run: |
          cd target/x86_64-unknown-linux-musl/release

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/x86_64-unknown-linux-musl/release/mina-zkml-cli
          asset_name: mina-zkml-cli
          asset_content_type: application/octet-stream
