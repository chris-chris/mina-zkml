var searchIndex = new Map(JSON.parse('[["mina_zkml",{"t":"CCCCCCCPGPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPIPGPPFPGGIGFPPPPPPFFFPPPPPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNOOOONOONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNOOOOOOOOOOOOOOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNONNNNNNNNNNHNNONONNOHNNNNNNNNNNNNNNCCHHHPPPPPPPPPPTPPPPGGGGPTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHHHEIOOCCOCOOPPPPPGPPPPNNNNNNNNNHHNNNNNNNNNNOOOFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOONNNNNNNNNNNNNNNNOOONNNNSSFSSNNNNNNNNNNNNNNNNNNNN","n":["graph","zk","errors","model","scales","tract_integration","utilities","CyclicDependency","GraphError","InvalidInput","InvalidInputSlot","InvalidNodeType","InvalidOutputShape","InvalidOutputSlot","InvalidParams","MissingAttributes","MissingBatchSize","MissingNode","NodeNotFound","TractParseFailure","UnableToReadModel","UnableToSaveModel","UnsupportedOperation","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","clone_to_uninit","deref","deref_mut","drop","eq","fmt","","from","","init","into","into_any","into_any_arc","into_any_rc","to_owned","to_string","try_from","try_into","type_id","vzip","Add","AddAxis","Cast","Const","Conv","EinSum","ElementWiseOp","Fixed","Full","Gather","GraphLoadResult","Input","InputMapping","MatMul","MaxPool","Model","Node","NodeType","OperationType","Outlet","OutputMapping","ParsedNodes","Private","Public","Reduce","Relu","Reshape","RmAxis","RunArgs","SerializableNode","SerializableOutletId","Sigmoid","Single","Softmax","Stacked","","State","SubGraph","TypedBinOp","VarVisibility","Visibility","__clone_box","","","","","","","","","","","as_any","","","","","","","","","","","as_any_mut","","","","","","","","","","","attributes","borrow","","","","","","","","","","","borrow_mut","","","","","","","","","","","clone","","","","","","","","","","","clone_into","","","","","","","","","","","clone_to_uninit","","","","","","","","","","","default","","","deref","","","","","","","","","","","deref_mut","","","","","","","","","","","deserialize","","","","","","","","","","","drop","","","","","","","","","","","eq","","","","execute","fmt","","","","","","","","","","","from","","","","","","","","","","","","","","get_output_scales","graph","id","init","","","","","","","","","","","input","inputs","","into","","","","","","","","","","","into_any","","","","","","","","","","","into_any_arc","","","","","","","","","","","into_any_rc","","","","","","","","","","","is_state","load","load_onnx_model","load_onnx_using_tract","log_op_params_and_biases","new","node","nodes","nodes_from_graph","num_inputs","op_params","op_type","out_dims","out_scale","outlet","output","outputs","save","serialize","","","","","","","","","","","slot","to_owned","","","","","","","","","","","to_str","try_from","","","","","","","","","","","try_into","","","","","","","","","","","type_id","","","","","","","","","","","variables","visibility","vzip","","","","","","","","","","","axis","chunk","idx","input_mappings","inputs","model","out_dims","out_scales","output_mappings","axis","is_state","","outlet","","Scale","VarScales","__clone_box","","add","as_any","","as_any_mut","","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","deref","","deref_mut","","drop","","eq","equivalent","","","fmt","","from","","from_multiplier","from_multipliers","init","","input","input_multiplier","into","","into_any","","into_any_arc","","into_any_rc","","mul","multiplier_to_scale","new","","output","output_multiplier","params","params_multiplier","rebase","rebase_multiplier","scale_to_multiplier","sub","to_multiplier","to_owned","","try_from","","try_into","","type_id","","unrebase","value","vzip","","functions","types","tensor_to_vec","vec_to_tensor","vec_to_tract_vec","Abs","Acos","Acosh","Add","ArgMax","ArgMin","Asin","Asinh","Atan","Atanh","BIN_OP_MAP","Binary","Ceil","Cos","Cosh","CustomBinOp","CustomDatumType","CustomElementWiseOp","CustomReducer","Div","ELEMENTWISE_OP_MAP","Erf","Exp","F16","F32","F64","Floor","I16","I32","I64","I8","Ln","Max","","MeanOfSquares","Min","","Mul","Neg","Pow","Prod","Recip","Rem","Round","Rsqrt","ShiftLeft","ShiftRight","Sign","Sin","Sinh","Sqrt","Square","Sub","Sum","Tan","Tanh","U16","U32","U64","U8","__clone_box","","","","as_any","","","","as_any_mut","","","","borrow","","","","borrow_mut","","","","clone","","","","clone_into","","","","clone_to_uninit","","","","cmp","deref","","","","deref_mut","","","","drop","","","","dyn_hash","","","eq","","","","equivalent","","","","","","","","","","","","fmt","","","","from","","","","get_datum_type_from_index","get_index_from_datum_type","get_index_from_op","","get_index_from_reducer","get_op_from_index","","get_reducer_from_index","hash","","","init","","","","into","","","","into_any","","","","into_any_arc","","","","into_any_rc","","","","partial_cmp","to_owned","","","","try_from","","","","try_into","","","","type_id","","","","vzip","","","","create_add_axis_node","create_const_node","create_conv_node","create_elementwise_node","create_gather_node","create_input_node","create_max_pool_node","create_node","create_reduce_node","create_softmax_node","create_typedbin_node","get_value_from_attributes","handle_pool_spec","node_output_shapes","ModelCircuitBuilder","ZkOpeningProof","delta","lr","operations","proof","sg","wiring","z1","z2","Add","Const","EinSum","MatMul","Max","OnnxOperation","Relu","Reshape","RmAxis","Sigmoid","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","identify_operation","identify_tract_operation","init","into","into_any","into_any_arc","into_any_rc","to_circuit_gates","try_from","try_into","type_id","vzip","k","m","n","ProverOutput","ProverSystem","VerifierSystem","__clone_box","","","as_any","","","as_any_mut","","","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","deref","","","deref_mut","","","deserialize","","","drop","","","from","","","init","","","into","","","into_any","","","into_any_arc","","","into_any_rc","","","new","","output","proof","prove","prover_index","","serialize","","","to_owned","","","try_from","","","try_into","","","type_id","","","verifier","verifier_index","","","verify","vzip","","","COLUMNS","MIN_DOMAIN_SIZE","ModelCircuitBuilder","PERMUTS","WIRES","as_any","as_any_mut","borrow","borrow_mut","build_circuit","default","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","try_from","try_into","type_id","vzip"],"q":[[0,"mina_zkml"],[2,"mina_zkml::graph"],[7,"mina_zkml::graph::errors"],[50,"mina_zkml::graph::model"],[406,"mina_zkml::graph::model::InputMapping"],[408,"mina_zkml::graph::model::NodeType"],[415,"mina_zkml::graph::model::OutputMapping"],[420,"mina_zkml::graph::scales"],[492,"mina_zkml::graph::tract_integration"],[494,"mina_zkml::graph::tract_integration::functions"],[497,"mina_zkml::graph::tract_integration::types"],[681,"mina_zkml::graph::utilities"],[695,"mina_zkml::zk"],[705,"mina_zkml::zk::operations"],[736,"mina_zkml::zk::operations::OnnxOperation"],[739,"mina_zkml::zk::proof"],[826,"mina_zkml::zk::wiring"],[851,"dyn_clone::sealed"],[852,"core::any"],[853,"core::fmt"],[854,"anyhow"],[855,"alloc::boxed"],[856,"alloc::sync"],[857,"alloc::rc"],[858,"alloc::string"],[859,"core::result"],[860,"serde::de"],[861,"alloc::vec"],[862,"tract_core::model::node"],[863,"tract_core::model::fact"],[864,"tract_core::ops"],[865,"std::path"],[866,"core::convert"],[867,"tract_core::model::graph"],[868,"tract_data::dim::sym"],[869,"alloc::collections::btree::map"],[870,"serde::ser"],[871,"core::option"],[872,"tract_data::tensor"],[873,"tract_data"],[874,"tract_data::datum"],[875,"core::marker"],[876,"tract_core::value"],[877,"core::cmp"],[878,"core::hash"],[879,"tract_core::ops::binary"],[880,"tract_core::ops::element_wise"],[881,"tract_core::ops::nn::reduce"],[882,"std::collections::hash::map"],[883,"tract_core::ops::cnn::pools"],[884,"tract_core::ops::cnn::conv"],[885,"tract_core::model::typed"],[886,"mina_curves::pasta::fields::fp"],[887,"kimchi::circuits::gate"],[888,"mina_curves::pasta::curves::vesta"],[889,"kimchi::verifier_index"],[890,"kimchi::proof"]],"i":"```````l`00000000000000000000000000000000000000000Bd000000ChCd2`2`22`Bj`````223333```3Cf420214``4BfBh3BlBnC`Cb869:5473210869:54732108692:5473210869:5473210869:5473210869:5473210869:5473210869430:5473210869:5473210869:5473210869:547321086908693:5473210869:5554732210869342:5473210869032:5473210869:5473210869:5473210869:5473210869644434534322226034:54732108695:54732108694:5473210869:5473210869:547321086914:5473210869Jh0Jj000000JlJn101``EnF`110101010101010101010111110101`1000101010101`10000000`11101010100110`````Gh00GfGb022221Gd333````233300030000312112232132332233333213300001023102310231023102310231023102301023102310230231023111000222333102310230023123102310231023102310231023010231023102310231023````````````````J`0``0`00Hn0000`0000000000000``0000000000K`00```IhIjIl210210210210210210210210210210210210210210210210210102212121021021021021012100210`````Jf0000000000000000000","f":"```````````````````````{{bd}f}{b{{b{h}}}}{{{b{j}}}{{b{jh}}}}{b{{b{c}}}{}}{{{b{j}}}{{b{jc}}}{}}{{{b{l}}}l}{{b{b{jc}}}f{}}{bf}{n{{b{c}}}{}}{n{{b{jc}}}{}}{nf}{{{b{l}}{b{l}}}A`}{{{b{l}}{b{jAb}}}Ad}0{cc{}}{Afl}{{}n}{{}c{}}{{{Ah{c}}}{{Ah{h}}}{}}{{{Aj{c}}}{{Aj{h}}}{}}{{{Al{c}}}{{Al{h}}}{}}{bc{}}{bAn}{c{{B`{e}}}{}{}}{{}{{B`{c}}}{}}{bBb}8`````````````````````````````````````````{{bd}f}0000000000{b{{b{h}}}}0000000000{{{b{j}}}{{b{jh}}}}0000000000`{b{{b{c}}}{}}0000000000{{{b{j}}}{{b{jc}}}{}}0000000000{{{b{Bd}}}Bd}{{{b{Bf}}}Bf}{{{b{Bh}}}Bh}{{{b{Bj}}}Bj}{{{b{Bl}}}Bl}{{{b{Bn}}}Bn}{{{b{C`}}}C`}{{{b{Cb}}}Cb}{{{b{Cd}}}Cd}{{{b{Cf}}}Cf}{{{b{Ch}}}Ch}{{b{b{jc}}}f{}}0000000000{bf}0000000000{{}Bh}{{}Bl}{{}Cb}{n{{b{c}}}{}}0000000000{n{{b{jc}}}{}}0000000000{c{{B`{Bd}}}Cj}{c{{B`{Bf}}}Cj}{c{{B`{Bh}}}Cj}{c{{B`{Bj}}}Cj}{c{{B`{Bl}}}Cj}{c{{B`{Bn}}}Cj}{c{{B`{C`}}}Cj}{c{{B`{Cb}}}Cj}{c{{B`{Cd}}}Cj}{c{{B`{Cf}}}Cj}{c{{B`{Ch}}}Cj}{nf}0000000000{{{b{Cb}}{b{Cb}}}A`}{{{b{Cd}}{b{Cd}}}A`}{{{b{Cf}}{b{Cf}}}A`}{{{b{Ch}}{b{Ch}}}A`}{{{b{Bl}}{b{{D`{{Cn{Cl}}}}}}}{{B`{{Cn{{Cn{Cl}}}}l}}}}{{{b{Bd}}{b{jAb}}}Ad}{{{b{Bf}}{b{jAb}}}Ad}{{{b{Bh}}{b{jAb}}}Ad}{{{b{Bj}}{b{jAb}}}Ad}{{{b{Bl}}{b{jAb}}}Ad}{{{b{Bn}}{b{jAb}}}Ad}{{{b{C`}}{b{jAb}}}Ad}{{{b{Cb}}{b{jAb}}}Ad}{{{b{Cd}}{b{jAb}}}Ad}{{{b{Cf}}{b{jAb}}}Ad}{{{b{Ch}}{b{jAb}}}Ad}{cc{}}0{{{b{Db}}}Bf}{DbBf}222{{{b{{Dh{Dd{Ah{Df}}}}}}}Bn}333333{{{b{Bl}}}{{B`{{Cn{Dj}}l}}}}``{{}n}0000000000```{{}c{}}0000000000{{{Ah{c}}}{{Ah{h}}}{}}0000000000{{{Aj{c}}}{{Aj{h}}}{}}0000000000{{{Al{c}}}{{Al{h}}}{}}0000000000{{{b{Cf}}}A`}{c{{B`{Bhl}}}{{Dn{Dl}}}}{{{b{E`}}{b{C`}}{b{Cb}}}{{B`{Bll}}}}{{c{b{C`}}}{{B`{Ebl}}}{{Dn{Dl}}}}{{{b{Bl}}}{{B`{fl}}}}{{{b{E`}}{b{C`}}{b{Cb}}}{{B`{Bhl}}}}``{{{b{{Ed{Dd{Ah{Df}}}}}}CbEf}{{B`{{Eh{nBj}}l}}}}{{{b{Bl}}}n}````{{{b{Cf}}}n}``{{{b{Bh}}c}{{B`{fl}}}{{Dn{Dl}}}}{{{b{Bd}}c}B`Ej}{{{b{Bf}}c}B`Ej}{{{b{Bh}}c}B`Ej}{{{b{Bj}}c}B`Ej}{{{b{Bl}}c}B`Ej}{{{b{Bn}}c}B`Ej}{{{b{C`}}c}B`Ej}{{{b{Cb}}c}B`Ej}{{{b{Cd}}c}B`Ej}{{{b{Cf}}c}B`Ej}{{{b{Ch}}c}B`Ej}`{bc{}}0000000000{{{b{Bh}}}{{El{An}}}}{c{{B`{e}}}{}{}}0000000000{{}{{B`{c}}}{}}0000000000{bBb}0000000000``{{}c{}}0000000000````````````````{{bd}f}0{{EnEn}En}{b{{b{h}}}}0{{{b{j}}}{{b{jh}}}}0{b{{b{c}}}{}}0{{{b{j}}}{{b{jc}}}{}}0{{{b{En}}}En}{{{b{F`}}}F`}{{b{b{jc}}}f{}}0{bf}0{n{{b{c}}}{}}0{n{{b{jc}}}{}}0{nf}0{{{b{En}}{b{En}}}A`}{{b{b{c}}}A`{}}00{{{b{En}}{b{jAb}}}Ad}{{{b{F`}}{b{jAb}}}Ad}{cc{}}0{FbEn}{{FbFbFbFb}F`}{{}n}0`{{{b{F`}}}Fb}{{}c{}}0{{{Ah{c}}}{{Ah{h}}}{}}0{{{Aj{c}}}{{Aj{h}}}{}}0{{{Al{c}}}{{Al{h}}}{}}0{{EnDj}En}8{DjEn}{{EnEnEnFb}F`}`7`7{{{b{F`}}Fb}Fb}`{EnFb}{{EnEn}En}{{{b{En}}}Fb}{bc{}}0{c{{B`{e}}}{}{}}0{{}{{B`{c}}}{}}0{bBb}07{{{b{En}}}Dj}??``{{{b{Fd}}}{{Ff{{Cn{c}}}}}Fh}{{{b{{D`{n}}}}{b{{D`{c}}}}}{{Ff{Fd}}}{FjFhFl}}{{{b{{D`{n}}}}{b{{D`{c}}}}}{{Ff{{G`{Fn}}}}}{FjFhFl}}````````````````````````````````````````````````````````````{{bd}f}000{b{{b{h}}}}000{{{b{j}}}{{b{jh}}}}000{b{{b{c}}}{}}000{{{b{j}}}{{b{jc}}}{}}000{{{b{Gb}}}Gb}{{{b{Gd}}}Gd}{{{b{Gf}}}Gf}{{{b{Gh}}}Gh}{{b{b{jc}}}f{}}000{bf}000{{{b{Gd}}{b{Gd}}}Gj}{n{{b{c}}}{}}000{n{{b{jc}}}{}}000{nf}000{{b{b{jGl}}}f}00{{{b{Gb}}{b{Gb}}}A`}{{{b{Gd}}{b{Gd}}}A`}{{{b{Gf}}{b{Gf}}}A`}{{{b{Gh}}{b{Gh}}}A`}{{b{b{c}}}A`{}}00000000000{{{b{Gb}}{b{jAb}}}Ad}{{{b{Gd}}{b{jAb}}}Ad}{{{b{Gf}}{b{jAb}}}Ad}{{{b{Gh}}{b{jAb}}}Ad}{cc{}}000{n{{El{Gn}}}}{Gnn}{{{b{H`}}}{{El{n}}}}{{{b{Hb}}}{{El{n}}}}{Hdn}{{{b{n}}}{{El{{Ah{H`}}}}}}{{{b{n}}}{{El{{Ah{Hb}}}}}}{n{{El{Hd}}}}{{{b{Gd}}{b{jc}}}fGl}{{{b{Gf}}{b{jc}}}fGl}{{{b{Gh}}{b{jc}}}fGl}{{}n}000{{}c{}}000{{{Ah{c}}}{{Ah{h}}}{}}000{{{Aj{c}}}{{Aj{h}}}{}}000{{{Al{c}}}{{Al{h}}}{}}000{{{b{Gd}}{b{Gd}}}{{El{Gj}}}}{bc{}}000{c{{B`{e}}}{}{}}000{{}{{B`{c}}}{}}000{bBb}0008888{{n{Cn{{Hf{nn}}}}{Cn{n}}{Hh{An{Cn{Dj}}}}}Bj}{{n{Cn{n}}{Cn{Cl}}}Bj}111{{n{Cn{n}}}Bj}2{{n{Cn{{Hf{nn}}}}{Cn{n}}Bd{El{{Hh{An{Cn{Dj}}}}}}{El{{Cn{Cl}}}}}Bj}333{{{b{E`}}{b{{Hh{An{Cn{n}}}}}}}{{B`{{Cn{n}}Af}}}}{{{b{j{Hh{An{Cn{n}}}}}}{b{Hj}}{b{{El{Hl}}}}}f}{{{b{{Dh{Dd{Ah{Df}}}}}}{b{Ef}}}{{B`{{Cn{{Cn{n}}}}l}}}}````````````````````{b{{b{h}}}}{{{b{j}}}{{b{jh}}}}{b{{b{c}}}{}}{{{b{j}}}{{b{jc}}}{}}{n{{b{c}}}{}}{n{{b{jc}}}{}}{nf}{{{b{Hn}}{b{jAb}}}Ad}{cc{}}{{{b{Bn}}}{{El{Hn}}}}{{{b{I`}}}{{El{Bd}}}}{{}n}{{}c{}}{{{Ah{c}}}{{Ah{h}}}{}}{{{Aj{c}}}{{Aj{h}}}{}}{{{Al{c}}}{{Al{h}}}{}}{{{b{Hn}}n}{{If{{Cn{{Id{Ib}}}}}}}}{c{{B`{e}}}{}{}}{{}{{B`{c}}}{}}{bBb}7``````{{bd}f}00{b{{b{h}}}}00{{{b{j}}}{{b{jh}}}}00{b{{b{c}}}{}}00{{{b{j}}}{{b{jc}}}{}}00{{{b{Ih}}}Ih}{{{b{Ij}}}Ij}{{{b{Il}}}Il}{{b{b{jc}}}f{}}00{bf}00{n{{b{c}}}{}}00{n{{b{jc}}}{}}00{c{{B`{Ih}}}Cj}{c{{B`{Ij}}}Cj}{c{{B`{Il}}}Cj}{nf}00{cc{}}00{{}n}00{{}c{}}00{{{Ah{c}}}{{Ah{h}}}{}}00{{{Aj{c}}}{{Aj{h}}}{}}00{{{Al{c}}}{{Al{h}}}{}}00{{{b{Bh}}}Ij}{{{Jb{InJ`}}}Il}``{{{b{Ij}}{b{{D`{{Cn{Cl}}}}}}}{{B`{IhAn}}}}``{{{b{Ih}}c}B`Ej}{{{b{Ij}}c}B`Ej}{{{b{Il}}c}B`Ej}{bc{}}00{c{{B`{e}}}{}{}}00{{}{{B`{c}}}{}}00{bBb}00{{{b{Ij}}}Il}```{{{b{Il}}{b{{Jd{InJ`}}}}{El{{b{{D`{{Cn{Cl}}}}}}}}{El{{b{{D`{{Cn{Cl}}}}}}}}}{{B`{A`An}}}}???`````{b{{b{h}}}}{{{b{j}}}{{b{jh}}}}{b{{b{c}}}{}}{{{b{j}}}{{b{jc}}}{}}{{{b{jJf}}{b{Bh}}}{{Hf{{Cn{{Id{Ib}}}}nn}}}}{{}Jf}{n{{b{c}}}{}}{n{{b{jc}}}{}}{nf}{cc{}}{{}n}{{}c{}}{{{Ah{c}}}{{Ah{h}}}{}}{{{Aj{c}}}{{Aj{h}}}{}}{{{Al{c}}}{{Al{h}}}{}}9{c{{B`{e}}}{}{}}{{}{{B`{c}}}{}}{bBb}6","D":"ADj","p":[[1,"reference"],[5,"Private",851],[1,"unit"],[10,"Any",852],[0,"mut"],[6,"GraphError",7],[1,"usize"],[1,"bool"],[5,"Formatter",853],[8,"Result",853],[5,"Error",854],[5,"Box",855],[5,"Arc",856],[5,"Rc",857],[5,"String",858],[6,"Result",859],[5,"TypeId",852],[6,"OperationType",50],[5,"SerializableOutletId",50],[5,"Model",50],[6,"NodeType",50],[5,"ParsedNodes",50],[5,"SerializableNode",50],[5,"RunArgs",50],[5,"VarVisibility",50],[6,"InputMapping",50],[6,"OutputMapping",50],[6,"Visibility",50],[10,"Deserializer",860],[1,"f32"],[5,"Vec",861],[1,"slice"],[5,"OutletId",862],[5,"TypedFact",863],[10,"TypedOp",864],[5,"Node",862],[1,"i32"],[5,"Path",865],[10,"AsRef",866],[1,"str"],[8,"GraphLoadResult",50],[5,"Graph",867],[5,"SymbolValues",868],[5,"BTreeMap",869],[10,"Serializer",870],[6,"Option",871],[5,"Scale",420],[5,"VarScales",420],[1,"f64"],[5,"Tensor",872],[8,"TractResult",873],[10,"Datum",874],[10,"Debug",853],[10,"Copy",875],[6,"TValue",876],[8,"TVec",873],[6,"CustomReducer",497],[6,"CustomDatumType",497],[6,"CustomBinOp",497],[6,"CustomElementWiseOp",497],[6,"Ordering",877],[10,"Hasher",878],[6,"DatumType",874],[10,"BinMiniOp",879],[10,"ElementWiseMiniOp",880],[6,"Reducer",881],[1,"tuple"],[5,"HashMap",882],[5,"PoolSpec",883],[6,"KernelFormat",884],[6,"OnnxOperation",705],[8,"TypedNode",885],[8,"Fp",886],[5,"CircuitGate",887],[8,"Result",854],[5,"ProverOutput",739],[5,"ProverSystem",739],[5,"VerifierSystem",739],[8,"Vesta",888],[8,"ZkOpeningProof",695],[5,"VerifierIndex",889],[5,"ProverProof",890],[5,"ModelCircuitBuilder",826],[15,"Stacked",406],[15,"SubGraph",408],[15,"Stacked",415],[15,"Single",415],[15,"MatMul",736]],"r":[[695,826]],"b":[[35,"impl-Debug-for-GraphError"],[36,"impl-Display-for-GraphError"],[245,"impl-From%3C%26OutletId%3E-for-SerializableOutletId"],[246,"impl-From%3COutletId%3E-for-SerializableOutletId"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAK4COwAAAAMABgACAAoAGwAnAAEAKgAQADwAAAA+AAAAQAABAEkABQBSAAAAVAAAAFkAAABcACAAfgBpAOkACgD2AAEA+wAAAAMBAAAFAQsAHgEgAEUBAABOAQAAUQEWAGkBIACLARkApwEBAKoBGQDIAQIAzgEFANgBAADaAQAA3QEAAOEBBwDrAQEA8gEJAP0BAwAFAgAABwJqAH4CBgCJAiAAuAICALwCAQC/AgcAyAILANcCAADZAgIA3QIGAOcCIwAOAwIAFAMIAB8DAQAiAxAANAMCADgDAgBAAwMARQMDAEoDAABMAwIAUAMDAA=="}],["mina_zkml_cli",{"t":"FGPPPPPNNNNNNNNNNNNNONNNNNHNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNHNNOOOOOOOOOOOOOOO","n":["Cli","Commands","Convert","Proof","ShowProof","Table","Verify","as_any","","as_any_mut","","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","","borrow_mut","","command","","command_for_update","deref","","deref_mut","","deserialize_prover_output","drop","","from","","from_arg_matches","","from_arg_matches_mut","","group_id","has_subcommand","init","","into","","into_any","","into_any_arc","","into_any_rc","","main","parse_visibility","serialize_prover_output","try_from","","try_into","","type_id","","update_from_arg_matches","","update_from_arg_matches_mut","","validate_input_json","vzip","","input","","input_visibility","","model","","","","output","","","output_visibility","","proof",""],"q":[[0,"mina_zkml_cli"],[63,"mina_zkml_cli::Commands"],[78,"core::any"],[79,"clap_builder::builder::command"],[80,"mina_zkml::zk::proof"],[81,"anyhow"],[82,"clap_builder::parser::matches::arg_matches"],[83,"clap_builder"],[84,"core::result"],[85,"clap_builder::util::id"],[86,"core::option"],[87,"alloc::boxed"],[88,"alloc::sync"],[89,"alloc::rc"],[90,"mina_zkml::graph::model"],[91,"alloc::vec"],[92,"serde_json::value"]],"i":"``An0000Ah101001101010000101`01010101010101010101```0101010101`01ChCj10ClCn32032322D`","f":"```````{b{{b{d}}}}0{{{b{f}}}{{b{fd}}}}0{hh}000{b{{b{c}}}{}}0{{{b{f}}}{{b{fc}}}{}}0{{}h}`0{j{{b{c}}}{}}0{j{{b{fc}}}{}}0{{{b{{n{l}}}}}{{Ab{A`}}}}{jAd}0{cc{}}0{{{b{Af}}}{{Al{AhAj}}}}{{{b{Af}}}{{Al{AnAj}}}}{{{b{fAf}}}{{Al{AhAj}}}}{{{b{fAf}}}{{Al{AnAj}}}}{{}{{Bb{B`}}}}{{{b{Bd}}}Bf}{{}j}0{{}c{}}0{{{Bh{c}}}{{Bh{d}}}{}}0{{{Bj{c}}}{{Bj{d}}}{}}0{{{Bl{c}}}{{Bl{d}}}{}}0{{}{{Ab{Ad}}}}{{{b{Bd}}}{{Ab{Bn}}}}{{{b{A`}}}{{Ab{{C`{l}}}}}}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{bCb}0{{{b{fAh}}{b{Af}}}{{Al{AdAj}}}}{{{b{fAn}}{b{Af}}}{{Al{AdAj}}}}{{{b{fAh}}{b{fAf}}}{{Al{AdAj}}}}{{{b{fAn}}{b{fAf}}}{{Al{AdAj}}}}{{{b{Cd}}}{{Ab{{C`{{C`{Cf}}}}}}}}>>```````````````","D":"D`","p":[[1,"reference"],[10,"Any",78],[0,"mut"],[5,"Command",79],[1,"usize"],[1,"u8"],[1,"slice"],[5,"ProverOutput",80],[8,"Result",81],[1,"unit"],[5,"ArgMatches",82],[5,"Cli",0],[8,"Error",83],[6,"Result",84],[6,"Commands",0],[5,"Id",85],[6,"Option",86],[1,"str"],[1,"bool"],[5,"Box",87],[5,"Arc",88],[5,"Rc",89],[6,"Visibility",90],[5,"Vec",91],[5,"TypeId",78],[6,"Value",92],[1,"f32"],[15,"Proof",63],[15,"Verify",63],[15,"Table",63],[15,"Convert",63],[15,"ShowProof",63]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC4ABgAIABIAHAABACAABwAqAAUAMwAJAD4AAQA="}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[16810,2595]}