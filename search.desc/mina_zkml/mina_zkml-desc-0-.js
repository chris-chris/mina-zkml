searchState.loadedDescShard("mina_zkml", 0, "This module defines the core structures and functions for …\nThis library provides utilities for working with scaling …\nRepresents various errors that can occur within the graph …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInput is passed through completely\nType alias for the graph loading result\nDefines how inputs are mapped in subgraphs\nMain model structure containing the parsed graph and …\nA regular computation node\nRepresents different types of nodes in the graph\nEnum representing different types of operations that can …\nRepresents a node output connection as (node_index, …\nDefines how outputs are mapped in subgraphs\nRepresents the parsed neural network graph structure\nArguments for running the model\nSerializable version of Node that excludes TypedOp\nSerializable version of OutletId\nSingle output connection\nInput is stacked along an axis\nOutput stacked along an axis\nInput represents a state\nA subgraph node (typically used for control flow …\nControls visibility of variables in the model\nVariable visibility levels\nAttributes for the operations\nExecute the graph with given inputs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a vector of output scales for all output nodes\nUnique identifier for the node\nIndices of input nodes\nInput connections to this node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this output represents a state\nLoads a model from a binary file\nLoads an ONNX model and converts it into the internal …\nLoads an ONNX model using the <code>tract</code> library.\nLogs the parameters and biases of operations in the graph …\nCreates a new <code>Model</code> by loading an ONNX model from the …\nMap of node indices to their corresponding node types\nConverts a tract graph into the internal node …\nReturns the number of input nodes in the graph\nParameters (op_params or bias)\nOperation type\nOutput dimensions\nOutput scale factor\nReturns the output slot index\nList of output connections (node_index, slot)\nSaves the model to a binary file\nReturns a string representation of the graph\nMap of variable names to their values\nRepresents a scaling factor as an integer, supporting …\nA structure to manage input, parameter, and output scales …\nAdds two scales, resulting in a new <code>Scale</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Scale</code> from a multiplier value.\nCreates a <code>VarScales</code> instance from multiplier values.\nReturns the multiplier for the input scale.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMultiplies a scale by an integer factor.\nConverts a multiplier value to a <code>Scale</code>.\nCreates a new <code>Scale</code> with the given integer value.\nCreates a new <code>VarScales</code> instance.\nReturns the multiplier for the output scale.\nReturns the multiplier for the parameter scale.\nRebases a value using the rebase multiplier.\nConverts a <code>Scale</code> to its multiplier value.\nSubtracts one scale from another.\nConverts the scale to a multiplier (2^scale).\nRestores a rebased value to its original scale.\nReturns the integer value of the scale.\nFunctions for integrating with Tract for tensor …\nCustom types and operations for Tract integration.\nConverts a Tract tensor into a Rust vector.\nConverts a vector and its dimensions into a …\nConverts a vector and its dimensions into a …\nA static mapping of binary operation names, Tract <code>BinMiniOp</code>…\nRepresents custom binary operations and their mappings to …\nRepresents custom data types and their mappings to Tract’…\nRepresents custom element-wise operations and their …\nRepresents custom reducers and their mappings to Tract’s …\nA static mapping of element-wise operation names, Tract …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>DatumType</code> corresponding to a given index.\nGets the index corresponding to a given <code>DatumType</code>.\nGet the index of a binary operation by matching its name.\nGet the index of an element-wise operation by matching its …\nGets the index corresponding to a given <code>Reducer</code>.\nGet the <code>CustomBinOp</code> corresponding to an index.\nGet the <code>CustomElementWiseOp</code> corresponding to an index.\nGets the <code>Reducer</code> corresponding to a given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an AddAxis node with the given parameters.\nCreates a Const node with the given id, shape, and values.\nCreates a Conv node with the given parameters.\nCreates an ElementWiseOp node with the given parameters.\nCreates a Gather node with the given parameters.\nCreates an Input node with the given id and shape.\nCreates a MaxPool node with the given parameters.\nCreates a new node with the given parameters.\nCreates a Reduce node with the given parameters.\nCreates a Softmax node with the given parameters.\nCreates a TypedBinOp node with the given parameters.\nRetrieves a value from the attributes HashMap.\nHandles the PoolSpec attributes and inserts them into the …\nRetrieves the output shapes of a given ONNX node.\nVector of rounds of L &amp; R commitments\nA final folded commitment base\nMaps ONNX operations to Kimchi circuit gates\nReturns the argument unchanged.\nAttempts to identify the ONNX operation type from a …\nIdentifies the operation type from a tract node\nCalls <code>U::from(self)</code>.\nConvert ONNX operation to Kimchi circuit gates\nResult type containing model output (if public) and its …\nCreates prover and verifier indices for a model\nVerifier system for verifying proofs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new prover system from a model\nCreate a new verifier system from a verifier index\nGenerate model output and create a proof\nGet the verifier system for this prover\nVerify a proof with optional public inputs/outputs\nNumber of coefficients columns in the circuit\nMinimum domain size required for the circuit\nBuilder for creating arithmetic circuits from …\nNumber of permutable columns in the circuit\nWire indices for all columns\nBuilds a circuit from a computational model\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ModelCircuitBuilder</code> instance")