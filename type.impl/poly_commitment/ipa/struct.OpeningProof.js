(function() {
    var type_impls = Object.fromEntries([["mina_zkml",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-Clone-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + AffineRepr,\n    &lt;G as AffineRepr&gt;::ScalarField: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; OpeningProof&lt;G&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-Debug-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + AffineRepr,\n    &lt;G as AffineRepr&gt;::ScalarField: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-Default-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + AffineRepr,\n    &lt;G as AffineRepr&gt;::ScalarField: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; OpeningProof&lt;G&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, G&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: AffineRepr + CanonicalDeserialize + CanonicalSerialize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OpeningProof&lt;G&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.213/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OpenProof%3CG%3E-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-OpenProof%3CG%3E-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;BaseField, G&gt; OpenProof&lt;G&gt; for OpeningProof&lt;G&gt;<div class=\"where\">where\n    BaseField: PrimeField,\n    G: AffineRepr&lt;BaseField = BaseField&gt; + CommitmentCurve + EndoCurve,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.SRS\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SRS\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SRS</a> = SRS&lt;G&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.open\" class=\"method trait-impl\"><a href=\"#method.open\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">open</a>&lt;EFqSponge, RNG, D&gt;(\n    srs: &amp;&lt;OpeningProof&lt;G&gt; as OpenProof&lt;G&gt;&gt;::SRS,\n    group_map: &amp;&lt;G as CommitmentCurve&gt;::Map,\n    plnms: &amp;[(DensePolynomialOrEvaluations&lt;'_, &lt;G as AffineRepr&gt;::ScalarField, D&gt;, PolyComm&lt;&lt;G as AffineRepr&gt;::ScalarField&gt;)],\n    elm: &amp;[&lt;G as AffineRepr&gt;::ScalarField],\n    polyscale: &lt;G as AffineRepr&gt;::ScalarField,\n    evalscale: &lt;G as AffineRepr&gt;::ScalarField,\n    sponge: EFqSponge,\n    rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut RNG</a>,\n) -&gt; OpeningProof&lt;G&gt;<div class=\"where\">where\n    D: EvaluationDomain&lt;&lt;G as AffineRepr&gt;::ScalarField&gt;,\n    EFqSponge: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + FqSponge&lt;&lt;G as AffineRepr&gt;::BaseField, G, &lt;G as AffineRepr&gt;::ScalarField&gt;,\n    RNG: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.RngCore.html\" title=\"trait rand_core::RngCore\">RngCore</a> + <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.CryptoRng.html\" title=\"trait rand_core::CryptoRng\">CryptoRng</a>,</div></h4></section></summary><div class='docblock'>Create an opening proof for a batch of polynomials. The parameters are\nthe following: <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method trait-impl\"><a href=\"#method.verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">verify</a>&lt;EFqSponge, RNG&gt;(\n    srs: &amp;&lt;OpeningProof&lt;G&gt; as OpenProof&lt;G&gt;&gt;::SRS,\n    group_map: &amp;&lt;G as CommitmentCurve&gt;::Map,\n    batch: &amp;mut [BatchEvaluationProof&lt;'_, G, EFqSponge, OpeningProof&lt;G&gt;&gt;],\n    rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut RNG</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    EFqSponge: FqSponge&lt;&lt;G as AffineRepr&gt;::BaseField, G, &lt;G as AffineRepr&gt;::ScalarField&gt;,\n    RNG: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.RngCore.html\" title=\"trait rand_core::RngCore\">RngCore</a> + <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.CryptoRng.html\" title=\"trait rand_core::CryptoRng\">CryptoRng</a>,</div></h4></section></summary><div class='docblock'>Verify the opening proof</div></details></div></details>","OpenProof<G>","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: AffineRepr,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.prechallenges\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">prechallenges</a>&lt;EFqSponge&gt;(\n    &amp;self,\n    sponge: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut EFqSponge</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ScalarChallenge&lt;&lt;G as AffineRepr&gt;::ScalarField&gt;&gt;<div class=\"where\">where\n    EFqSponge: FqSponge&lt;&lt;G as AffineRepr&gt;::BaseField, G, &lt;G as AffineRepr&gt;::ScalarField&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Computes a log-sized vector of scalar challenges for\nrecombining elements inside the IPA.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.challenges\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">challenges</a>&lt;EFqSponge&gt;(\n    &amp;self,\n    endo_r: &amp;&lt;G as AffineRepr&gt;::ScalarField,\n    sponge: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut EFqSponge</a>,\n) -&gt; Challenges&lt;&lt;G as AffineRepr&gt;::ScalarField&gt;<div class=\"where\">where\n    EFqSponge: FqSponge&lt;&lt;G as AffineRepr&gt;::BaseField, G, &lt;G as AffineRepr&gt;::ScalarField&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Same as <code>prechallenges</code>, but maps scalar challenges using the\nprovided endomorphism, and computes their inverses.</p>\n</div></details></div></details>",0,"mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + AffineRepr,\n    &lt;G as AffineRepr&gt;::ScalarField: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;OpeningProof&lt;G&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","mina_zkml::zk::ZkOpeningProof"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: AffineRepr + CanonicalDeserialize + CanonicalSerialize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.213/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","mina_zkml::zk::ZkOpeningProof"],["<section id=\"impl-StructuralPartialEq-for-OpeningProof%3CG%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-OpeningProof%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for OpeningProof&lt;G&gt;<div class=\"where\">where\n    G: AffineRepr,</div></h3></section>","StructuralPartialEq","mina_zkml::zk::ZkOpeningProof"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[18474]}